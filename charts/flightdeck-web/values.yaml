# Default values for flightdeck-web.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

replicaCount: 1

autoscaling:
  enabled: false
  minReplicas: 1
  maxReplicas: 3
  targetCPU: 600
  targetMemory: 600

image:
  repository: ten7/flightdeck-web-8.2
  tag: latest
  pullPolicy: IfNotPresent

imagePullSecrets: []
nameOverride: ""
fullnameOverride: ""

strategy:
  type: RollingUpdate
  rollingUpdate:
    maxSurge: 0
    maxUnavailable: 1

env: {}
#  - name: ATMOSPHERE
#    value: "Class M"

envFrom: {}
#  - configMapRef:
#      name: my-config
#      key: optional-key
#  - secretRef:
#      name: my-secret

config:
  vhosts:
    - name: "example.com"
      docroot: "/srv/html"
      aliases:
        - "docker.test"
  php:
    upload_max_filesize: "128M"
    post_max_size: "128M"

varnish:
  enabled: false
  image:
    repository: ten7/flightdeck-varnish-6
    tag: latest
    pullPolicy: IfNotPresent
  config:
    memSize: "16m"
    storageEnabled: false
    storageFile: "/var/lib/varnish/storage.bin"
    storageSize: "128m"
  securityContext: { }
  resources: {}

memcache:
  enabled: false
  image:
    repository: ten7/flightdeck-memcache-1.6
    tag: latest
    pullPolicy: IfNotPresent
  config:
    memory: "64"
    threads: "4"
    port: "11211"

serviceAccount:
  # Specifies whether a service account should be created
  create: false
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name:

podSecurityContext: {}
#  fsGroup: 1000

securityContext: {}
  # capabilities:
  #   drop:
  #   - ALL
  # readOnlyRootFilesystem: true
  # runAsNonRoot: true
  # runAsUser: 1000

service:
  enabled: false
  type: ClusterIP
  httpPort: 80
  varnishPort: 6081

ingress:
  enabled: false
  annotations: {}
    # kubernetes.io/ingress.class: nginx
    # kubernetes.io/tls-acme: "true"
  hosts: []
#    - host: chart-example.local
#      httpPaths:
#        - "/uncached"
#      varnishPaths:
#        - "/"
  tls: []
#    - secretName: chart-example-tls
#      hosts:
#        - chart-example.local

extraIngresses: {}
#  myIngressName:
#    annotations: {}
#    hosts:
#      - host: chart-example.test
#        httpPaths:
#          - "/uncached"
#        varnishPaths:
#          - "/"
#    tls:
#      - secretName: chart-example-tls
#        hosts:
#          - chart-example.local

resources: {}
  # We usually recommend not to specify default resources and to leave this as a conscious
  # choice for the user. This also increases chances charts run on environments with little
  # resources, such as Minikube. If you do want to specify resources, uncomment the following
  # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
  # limits:
  #   cpu: 100m
  #   memory: 128Mi
  # requests:
  #   cpu: 100m
  #   memory: 128Mi

extraVolumes: []

extraVolumeMounts: []

nodeSelector: {}

tolerations: []

affinity: {}
#  podAntiAffinity:
#    requiredDuringSchedulingIgnoredDuringExecution:
#    - labelSelector:
#        matchExpressions:
#        - key: app.kubernetes.io/name
#          operator: In
#          values:
#          - flightdeck-web
#        - key: app.kubernetes.io/instance
#          operator: In
#          values:
#          - my-release-name
#      topologyKey: "kubernetes.io/hostname"

# Extra cronjobs to run.
# These run the same container image as the deployment.
jobs: {}
#  myCronjobName:
#    annotations: {}
#    schedule: "*/10 * * * *"
#    args:
#      - "/bin/bash"
#      - "-c"
#      - "sleep 300"
#    resources:
#      limits:
#        cpu: 600m
#      requests:
#        cpu: 250m
#        memory: 320Mi
#    failedJobsHistoryLimit: 1
#    successfulJobsHistoryLimit: 3
#    concurrencyPolicy: Forbid
#    restartPolicy: OnFailure

postDeployJobs: {}
#  myPostDeployJobName:
#    #    hookWeight: "1"
#    #    command: ""
#    args:
#      - "/bin/bash"
#      - "-c"
#      - "echo 'hello' ; sleep 30 ; exit 0"
#    resources:
#      requests:
#        cpu: 100m
